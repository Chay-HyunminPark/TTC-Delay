# -*- coding: utf-8 -*-
"""TTC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zVUpnpSc_ye_7CVUbWtSWVqrDpODcR9p
"""

import polars as pl
import xlsxwriter

# Create list of random occuring delays
filter_codes = ["EUME", "EUOE", "MUIE", "MUPAA", "MUPR1", "MUSAN", "MUWR", "PUOPO",
                "SUAE", "SUAP", "SUBT", "SUDP", "SUEAS", "SUO", "SUPOL", "SUROB", "SUSA",
                "SUSP", "SUUT", "TUATC", "TUCC", "TUDOE", "TUKEY", "TUMVS", "TUNIP", "TUNOA",
                "TUOPO", "TUOS", "TUS", "TUSC", "TUSET", "TUSUP", "Collision - TTC", "Collision - TTC Involved",
                "Diversion", "Emergency Services", "Investigation", "Road Blocked", "Road Blocked - NON-TTC Collision",
                "Security"]

# Read and filter random occuring codes and rows with null values
bus = pl.scan_csv("bus-data.csv", schema_overrides={"Route": pl.String}).filter(~pl.col("Incident").is_in(filter_codes)).drop_nulls().with_columns(pl.col("Date").str.strptime(pl.Date, "%d-%b-%y"), pl.col("Time").str.strptime(pl.Time, "%H:%M")).rename({"Route": "Line", "Direction": "Bound"}).collect()
streetcar = pl.scan_csv("streetcar-data.csv", schema_overrides={"Line": pl.String}).filter(~pl.col("Incident").is_in(filter_codes)).drop_nulls().with_columns(pl.col("Date").str.strptime(pl.Date, "%d-%b-%y"), pl.col("Time").str.strptime(pl.Time, "%H:%M")).collect()
subway = pl.scan_csv("subway-data.csv", schema_overrides={"Date": pl.Date}).filter(~pl.col("Code").is_in(filter_codes)).drop_nulls().with_columns(pl.col("Time").str.strptime(pl.Time, "%H:%M")).rename({"Code": "Incident", "Station": "Location"}).collect()

# Read 2024 Weather data
weather = pl.scan_csv("2024 Weather.csv", schema_overrides={"Date/Time": pl.Date, "Total Rain (mm)": pl.Float64,
                                                            "Total Snow (cm)": pl.Float64}).select("Date/Time",
                                                            "Max Temp (°C)", "Min Temp (°C)", "Mean Temp (°C)", "Total Rain (mm)", "Total Snow (cm)",
                                                            ).rename({"Date/Time": "Date"}).collect()

# Join weather data to all dfs
bus = bus.join(weather, how="left", on="Date").with_columns(pl.lit("Bus").alias("Type"))
streetcar = streetcar.join(weather, how="left", on="Date").with_columns(pl.lit("Streetcar").alias("Type"))
subway = subway.join(weather, how="left", on="Date").select("Date", "Line", "Time", "Day", "Location", "Incident", "Min Delay", "Min Gap", "Bound", "Vehicle", "Max Temp (°C)", "Min Temp (°C)", "Mean Temp (°C)", "Total Rain (mm)", "Total Snow (cm)").with_columns(pl.lit("Subway").alias("Type"))

ttc = bus.vstack(streetcar).vstack(subway)
ttc

# Write into excel
ttc.write_excel("ttc_delays.xlsx")
