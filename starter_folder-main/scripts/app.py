
# Note: The below lines of code were partially generated by Chat GPT and referenced tkinter documentation
# https://www.geeksforgeeks.org/python-gui-tkinter/


import tkinter as tk
from tkinter import messagebox, ttk
from PIL import Image, ImageTk
import pickle
import numpy as np
import pandas as pd

# Load the model and preprocessing objects
with open("model.pkl", "rb") as file:
    artifacts = pickle.load(file)

model = artifacts["model"]
scaler = artifacts["scaler"]
one_hot_encoder = artifacts["one_hot_encoder"]
label_encoder = artifacts["label_encoder"]

# Feature names
categorical_features = ["Day"]
numerical_features = ["Min Delay/Min Gap", "Min Temp (째C)", "Mean Temp (째C)", "Total Rain (mm)", "Total Snow (cm)"]

# List of days for dropdown menu
days_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

# Load the dataset for locations (stations)
locations_df = pd.read_csv("ttc_delays_ratio.csv")  # Assuming CSV file with "Location" column
station_list = locations_df[locations_df['Location'].str.endswith("STATION")]['Location'].tolist()

# Create GUI window
root = tk.Tk()
root.title("TTC Tracker")
root.geometry("400x750")  # Adjusted size
root.configure(bg="white")  # Set background color to white

# Load and display the TTC logo
try:
    img = Image.open("logo_ttc.png")
    img = img.resize((300, 150))  # Resize image
    ttc_logo = ImageTk.PhotoImage(img)
    logo_label = tk.Label(root, image=ttc_logo, bg="white")
    logo_label.pack(pady=10)
except Exception as e:
    print(f"Error loading image: {e}")

# Input fields
entries = {}
tk.Label(root, text="Enter Feature Values:", font=("Arial", 12, "bold"), bg="white", fg="black").pack(pady=5)

# Dropdown for "Day" (background color now white)
frame_day = tk.Frame(root, bg="white")
frame_day.pack(pady=5)

tk.Label(frame_day, text="Day:", font=("Arial", 10), bg="white", fg="black").pack(side=tk.LEFT, padx=5)
day_var = tk.StringVar()
day_dropdown = ttk.Combobox(frame_day, textvariable=day_var, values=days_of_week, state="readonly", width=18)
day_dropdown.pack(side=tk.RIGHT)
day_dropdown.current(0)
day_dropdown.configure(background="white", foreground="black")  # Force white background

# Create entry fields for other numerical features (removed "Total Rain" and "Total Snow")
for feature in numerical_features[2:]:  # Skip "Min Delay/Min Gap", "Total Rain" and "Total Snow"
    frame = tk.Frame(root, bg="white")
    frame.pack(pady=5)

    tk.Label(frame, text=feature + ":", font=("Arial", 10), bg="white", fg="black").pack(side=tk.LEFT, padx=5)
    entry = tk.Entry(frame, width=20, bg="white", fg="black")
    entry.pack(side=tk.RIGHT)
    entries[feature] = entry

# Label to display prediction result (right under the predict button)
result_label = tk.Label(root, text="", font=("Arial", 12, "bold"), bg="white", fg="black")
result_label.pack(pady=5)  # Positioned right after the Predict button

# Load the delay CSV into a pandas dataframe
delay_df = pd.read_csv('delay.csv')

# Create a dictionary to map incidents to their delay times
incident_delay_map = dict(zip(delay_df['Row Labels'], delay_df['Average of Min Delay']))

# Function to predict
def predict():
    try:
        # Get user input
        input_data = {"Day": day_var.get(), "Min Delay/Min Gap": 0.5}  # Use 0.5 as the constant value
        input_data.update({feature: float(entries[feature].get().strip()) for feature in numerical_features[2:]})  # Other inputs

        # Set constant values for rain and snow (No user input for these)
        input_data["Total Rain (mm)"] = 0
        input_data["Total Snow (cm)"] = 0
        input_data["Min Delay/Min Gap"] = 0.5

        # Set Min Temp to be the same as Mean Temp
        input_data["Min Temp (째C)"] = input_data["Mean Temp (째C)"]

        # Convert categorical data using OneHotEncoder
        categorical_input = np.array([[input_data[feature] for feature in categorical_features]])
        categorical_transformed = one_hot_encoder.transform(categorical_input)

        # Convert numerical data
        numerical_input = np.array([[input_data[feature] for feature in numerical_features]])

        # Combine categorical & numerical data
        X_input = np.hstack((categorical_transformed, numerical_input))

        # Standardize using the saved scaler
        X_scaled = scaler.transform(X_input)

        # Make prediction
        y_pred_prob = model.predict_proba(X_scaled)
        y_pred_index = np.argmax(y_pred_prob, axis=1)
        predicted_incident = label_encoder.inverse_transform(y_pred_index)[0]

        # Get the delay time from the incident_delay_map
        delay_time = incident_delay_map.get(predicted_incident, "N/A")

        # Display the result in the result_label with the delay time
        result_label.config(text=f"Predicted Incident: {predicted_incident}\nDelay Time: {delay_time} minutes")

        # Display TTC map if "Subway" was selected
        show_ttc_map()

    except Exception as e:
        # Display the error message in the result_label
        result_label.config(text=f"Error: {e}")

# Function to show TTC map if Subway is selected
def show_ttc_map():
    if transportation_var.get() == "Subway":
        try:
            img = Image.open("ttcmap.jpg")
            img = img.resize((300, 400))  # Resize the map
            ttc_map = ImageTk.PhotoImage(img)
            ttc_map_label.config(image=ttc_map)
            ttc_map_label.image = ttc_map  # Keep a reference to the image
        except Exception as e:
            print(f"Error loading TTC map: {e}")

# Add dropdown for transportation selection (subway, bus, streetcar)
frame_transportation = tk.Frame(root, bg="white")
frame_transportation.pack(pady=5)

tk.Label(frame_transportation, text="Transportation:", font=("Arial", 10), bg="white", fg="black").pack(side=tk.LEFT, padx=5)
transportation_var = tk.StringVar()
transportation_dropdown = ttk.Combobox(frame_transportation, textvariable=transportation_var, values=["Subway", "Bus", "Streetcar"], state="readonly", width=18)
transportation_dropdown.pack(side=tk.RIGHT)
transportation_dropdown.current(0)

# Add labels for Departure and Destination
frame_departure = tk.Frame(root, bg="white")
frame_departure.pack(pady=5)

tk.Label(frame_departure, text="Departure:", font=("Arial", 10), bg="white", fg="black").pack(side=tk.LEFT, padx=5)
departure_var = tk.StringVar()
departure_dropdown = ttk.Combobox(frame_departure, textvariable=departure_var, values=station_list, state="readonly", width=18)
departure_dropdown.pack(side=tk.RIGHT)

frame_destination = tk.Frame(root, bg="white")
frame_destination.pack(pady=5)

tk.Label(frame_destination, text="Destination:", font=("Arial", 10), bg="white", fg="black").pack(side=tk.LEFT, padx=5)
destination_var = tk.StringVar()
destination_dropdown = ttk.Combobox(frame_destination, textvariable=destination_var, values=station_list, state="readonly", width=18)
destination_dropdown.pack(side=tk.RIGHT)

# Predict Button
predict_btn = tk.Button(root, text="Predict", command=predict, font=("Arial", 12), bg="white", fg="black")
predict_btn.pack(pady=15)

# Label to display TTC map
ttc_map_label = tk.Label(root, bg="white")
ttc_map_label.pack(pady=5)

# Run the GUI
root.mainloop()
